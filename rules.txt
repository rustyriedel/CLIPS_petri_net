;EECS 638 Project 01 - Petri net using CLIPS
;@Author Rusty Riedel
;@Date 4/11/1017
;KUID# 2474883

(defrule print
	(and (fact (x clk) (status 0)) (fact (x first) (status 0)))
	?f1 <- (fact (x p1) (status ?p1))
	?f2 <- (fact (x p2) (status ?p2))
	?f3 <- (fact (x p3) (status ?p3))
	?f4 <- (fact (x p4) (status ?p4))
	?f5 <- (fact (x p5) (status ?p5))
	?f6 <- (fact (x p6) (status ?p6))
	?f7 <- (fact (x p7) (status ?p7))
	?f8 <- (fact (x p8) (status ?p8))
	?f9 <- (fact (x p9) (status ?p9))
	?f10 <- (fact (x p10) (status ?p10))
	?c <- (comm (c ?comment))
	=>
	(printout output ?p1 ",")
	(printout output ?p2 ",")
	(printout output ?p3 ",")
	(printout output ?p4 ",")
	(printout output ?p5 ",")
	(printout output ?p6 ",")
	(printout output ?p7 ",")
	(printout output ?p8 ",")
	(printout output ?p9 ",")
	(printout output ?p10 crlf)
	(printout output ?comment crlf)
)

(defrule upkeep
	;bind facts to variables
	?clk <- (fact (x clk) (status 0))
	?f <- (fact (x first) (status ?m))
	?fA <- (fact (x A) (status ?a))
	?fB <- (fact (x B) (status ?b))
	?fC <- (fact (x C) (status ?c))
	=>
	;set first to 0 after 1st run.
	(if (= ?m 1) then (modify ?f (status 0)))

	;read data from input file
	(bind ?reqX (read data))	
	(bind ?reqY (read data))
	(bind ?reqZ (read data))

	;determine if a request should be added
	(if (and (= ?reqX 1) (= ?a 1) (= ?b 1)) then	
		(assert (fact (x reqX) (status 1))))		
	(if (and (= ?reqX 0) (= ?reqY 1) (= ?b 1) (= ?c 1)) then 
		(assert (fact (x reqY) (status 1))))
	(if (and (= ?reqX 0) (= ?reqY 0) (= ?reqZ 1) (= ?c 1)) then 
		(assert (fact (x reqZ) (status 1))))
	(if (and (= ?reqX -1) (= ?reqY -1) (= ?reqZ -1)) then
			;end simulation
			(assert (fact (x end) (status 1)))			
			(modify ?f (status 1))
			(printout output "The exit input has been reached! Terminate simulation!" crlf))
		else
			(modify ?clk (status 1))	;start the clock pulse	
)

;--------------------------------
; Rules for making product X
;--------------------------------
(defrule t1
	(and (fact (x reqX) (status 1)) (fact (x A) (status 1)) (fact (x B) (status 1)) (fact (x clk) (status 1)))
	?fA <- (fact (x A) (status 1))
	?fB <- (fact (x B) (status 1))
	?fx <- (fact (x reqX) (status 1))
	?fy <- (fact (x p1) (status 0))
	?clk <- (fact (x clk) (status 1))
	?c <- (comm (c ?comment))
	=>
	(modify ?fA (status 0))
	(modify ?fB (status 0))
	(retract ?fx)
	(modify ?fy (status 1))
	(modify ?clk (status 0))
	(modify ?c (c "Fulfill the request for product X. Allocate resources A and B. Transition to place p1."))
)

(defrule t2
	(and   (fact (x p1) (status 1)) (fact (x clk) (status 1)))
	?fx <- (fact (x p1) (status 1))
	?fy <- (fact (x p2) (status 0))
	?clk <- (fact (x clk) (status 1))
	?c <- (comm (c ?comment))
	=>
	(modify ?fx (status 0))
	(modify ?fy (status 1))
	(modify ?clk (status 0))
	(modify ?c (c "Transition from place p1 to place p2."))
)

(defrule t3
	(and   (fact (x p2) (status 1)) (fact (x clk) (status 1)))
	?fx <- (fact (x p2) (status 1))
	?fy <- (fact (x p3) (status 0))
	?clk <- (fact (x clk) (status 1))
	?c <- (comm (c ?comment))
	=>
	(modify ?fx (status 0))
	(modify ?fy (status 1))
	(modify ?clk (status 0))
	(modify ?c (c "Transition from place p2 to place p3."))
)

(defrule t4
	(and (fact (x p3) (status 1)) (fact (x clk) (status 1)))
	?fA <- (fact (x A) (status 0))
	?fB <- (fact (x B) (status 0))
	?fx <- (fact (x p3) (status 1))
	?fy <- (fact (x p4) (status ?fys))
	?clk <- (fact (x clk) (status 1))
	?c <- (comm (c ?comment))
	=>
	(modify ?fA (status 1))
	(modify ?fB (status 1))
	(modify ?fx (status 0))
	(modify ?fy (status (+ ?fys 1)))
	(modify ?clk (status 0))
	(modify ?c (c "Transition from place p3 to place p4. Production for product X is complete! Deallocate resources A and B."))
)

;--------------------------------
; Rules for making product Y
;--------------------------------
(defrule t5
	(and (fact (x reqY) (status 1)) (fact (x B) (status 1)) (fact (x C) (status 1)) (fact (x clk) (status 1)))
	?fB <- (fact (x B) (status 1))
	?fC <- (fact (x C) (status 1))
	?fx <- (fact (x reqY) (status 1))
	?fy <- (fact (x p5) (status 0))
	?clk <- (fact (x clk) (status 1))
	?c <- (comm (c ?comment))
	=>
	(modify ?fB (status 0))
	(modify ?fC (status 0))
	(retract ?fx)
	(modify ?fy (status 1))
	(modify ?clk (status 0))
	(modify ?c (c "Fulfill the request for product Y. Allocate resources B and C. Transition to place p5."))
)

(defrule t6
	(and (fact (x p5) (status 1)) (fact (x clk) (status 1)))
	?fx <- (fact (x p5) (status 1))
	?fy <- (fact (x p6) (status 0))
	?clk <- (fact (x clk) (status 1))
	?c <- (comm (c ?comment))
	=>
	(modify ?fx (status 0))
	(modify ?fy (status 1))
	(modify ?clk (status 0))
	(modify ?c (c "Transition from place p5 to place p6."))
)

(defrule t7
	(and (fact (x p6) (status 1)) (fact (x clk) (status 1)))
	?fB <- (fact (x B) (status 0))
	?fC <- (fact (x C) (status 0))
	?fx <- (fact (x p6) (status 1))
	?fy <- (fact (x p7) (status ?fys))
	?clk <- (fact (x clk) (status 1))
	?c <- (comm (c ?comment))
	=>
	(modify ?fB (status 1))
	(modify ?fC (status 1))
	(modify ?fx (status 0))
	(modify ?fy (status (+ ?fys 1)))
	(modify ?clk (status 0))
	(modify ?c (c "Transition from place p6 to place p7. Production for product Y is complete! Deallocate resources B and C."))
)

;--------------------------------
; Rules for making product Z
;--------------------------------
(defrule t8
	(and (fact (x reqZ) (status 1)) (fact (x C) (status 1)) (fact (x clk) (status 1)))
	?fC <- (fact (x C) (status 1))
	?fx <- (fact (x reqZ) (status 1))
	?fy <- (fact (x p8) (status 0))
	?clk <- (fact (x clk) (status 1))
	?c <- (comm (c ?comment))
	=>
	(modify ?fC (status 0))
	(retract ?fx)
	(modify ?fy (status 1))
	(modify ?clk (status 0))
	(modify ?c (c "Fulfill the request for product Z. Allocate resource C. Transition to place p8."))
)

(defrule t9
	(and (fact (x p8) (status 1)) (fact (x clk) (status 1)))
	?fx <- (fact (x p8) (status 1))
	?fy <- (fact (x p9) (status 0))
	?clk <- (fact (x clk) (status 1))
	?c <- (comm (c ?comment))
	=>
	(modify ?fx (status 0))
	(modify ?fy (status 1))
	(modify ?clk (status 0))
	(modify ?c (c "Transition from place p8 to place p9."))
)

(defrule t10
	(and (fact (x p9) (status 1)) (fact (x clk) (status 1)))
	?fC <- (fact (x C) (status 0))
	?fx <- (fact (x p9) (status 1))
	?fy <- (fact (x p10) (status ?fys))
	?clk <- (fact (x clk) (status 1))
	?c <- (comm (c ?comment))
	=>
	(modify ?fC (status 1))
	(modify ?fx (status 0))
	(modify ?fy (status (+ ?fys 1)))
	(modify ?clk (status 0))
	(modify ?c (c "Transition from place p9 to place p10. Production for product Z is complete! Deallocate resource C."))
)

(defrule endclk
	(and (fact (x clk) (status 1)) (not (fact (x end) (status 1))))
	?clk <- (fact (x clk) (status 1))
	?c <- (comm (c ?comment))
	=>
	(modify ?clk (status 0))
	(modify ?c (c "No product requests, therefore, no transition on this clock pulse."))
)